import json
import requests
from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def get_data_codes():
    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file mapping
    try:
        with open('comprehensive-mapping-data.json', 'r', encoding='utf-8') as f:
            mapping_data = json.load(f)
            return mapping_data['mapping']
    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file mapping. Vui l√≤ng t·∫°o file tr∆∞·ªõc.")
        return {}

def update_web_data_codes():
    # C√†i ƒë·∫∑t Chrome options
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Ch·∫°y ·∫©n
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        # Truy c·∫≠p trang admin
        driver.get("https://daily.telebox.vn/products")
        
        # L·∫•y d·ªØ li·ªáu mapping
        data_codes = get_data_codes()
        
        # T√¨m t·∫•t c·∫£ c√°c d√≤ng s·∫£n ph·∫©m
        products = driver.find_elements(By.CSS_SELECTOR, "table tr.product-row")
        
        updated_count = 0
        for product in products:
            try:
                # L·∫•y t√™n s·∫£n ph·∫©m
                product_name = product.find_element(By.CSS_SELECTOR, ".product-name").text
                product_name_with_esim = f"{product_name} (esim)"
                
                # Ki·ªÉm tra xem c√≥ data code cho s·∫£n ph·∫©m n√†y kh√¥ng
                if product_name_with_esim in data_codes:
                    data_code = data_codes[product_name_with_esim]
                    
                    # T√¨m √¥ input data code
                    data_code_input = product.find_element(By.CSS_SELECTOR, ".data-code-input")
                    
                    # C·∫≠p nh·∫≠t data code
                    driver.execute_script(
                        "arguments[0].value = arguments[1]", 
                        data_code_input, 
                        data_code
                    )
                    
                    # Click n√∫t l∆∞u
                    save_button = product.find_element(By.CSS_SELECTOR, ".save-button")
                    save_button.click()
                    
                    # ƒê·ª£i th√¥ng b√°o th√†nh c√¥ng
                    WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".success-message"))
                    )
                    
                    updated_count += 1
                    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {product_name}: {data_code}")
                
            except Exception as e:
                print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t {product_name}: {str(e)}")
                continue
        
        print(f"\n‚ú® ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng {updated_count} s·∫£n ph·∫©m")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
    
    finally:
        driver.quit()

def export_to_excel():
    data_codes = get_data_codes()
    
    # Chuy·ªÉn ƒë·ªïi sang DataFrame
    df = pd.DataFrame([
        {
            'T√™n s·∫£n ph·∫©m': name.replace(' (esim)', ''),
            'Data Code': code
        }
        for name, code in data_codes.items()
    ])
    
    # L∆∞u ra file Excel
    excel_path = 'data_codes.xlsx'
    df.to_excel(excel_path, index=False)
    print(f"‚ú® ƒê√£ xu·∫•t data codes ra file {excel_path}")

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t data code...")
    
    # C·∫≠p nh·∫≠t data codes tr√™n web
    update_web_data_codes()
    
    # Xu·∫•t ra file Excel ƒë·ªÉ backup
    export_to_excel()