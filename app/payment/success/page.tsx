'use client'

import { useEffect, useState } from 'react'
import { useSearchParams } from 'next/navigation'

interface OrderDetails {
  orderId: string
  amount: string
  method: string
  timestamp: string
  status: 'processing' | 'completed' | 'pending'
}

export default function PaymentSuccessPage() {
  const searchParams = useSearchParams()
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading')
  const [message, setMessage] = useState('')
  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null)
  const [showConfetti, setShowConfetti] = useState(false)

  useEffect(() => {
    const handlePaymentSuccess = async () => {
      const method = searchParams.get('method')
      const orderId = searchParams.get('orderId')
      const paypalOrderId = searchParams.get('token') // PayPal order ID

      // Set order details
      setOrderDetails({
        orderId: orderId || 'Unknown',
        amount: 'Processing...', // Will be updated
        method: method || 'Unknown',
        timestamp: new Date().toLocaleString('vi-VN'),
        status: 'processing'
      })

      if (method === 'paypal' && paypalOrderId) {
        try {
          // Capture PayPal payment
          const response = await fetch('/api/paypal/capture', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              paypalOrderId,
              orderId
            }),
          })

          const result = await response.json()

          if (result.success) {
            setStatus('success')
            setMessage('üéâ Thanh to√°n PayPal th√†nh c√¥ng! ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.')
            setOrderDetails(prev => prev ? {
              ...prev,
              amount: result.amount || prev.amount,
              status: 'processing'
            } : null)
            setShowConfetti(true)
          } else {
            setStatus('error')
            setMessage('‚ùå Thanh to√°n PayPal th·∫•t b·∫°i. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.')
          }
        } catch (error) {
          setStatus('error')
          setMessage('‚ùå L·ªói x·ª≠ l√Ω thanh to√°n PayPal. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.')
        }
      } else if (method === 'payos') {
        // PayOS payment success
        setStatus('success')
        setMessage('üéâ Thanh to√°n PayOS th√†nh c√¥ng! ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.')
        setOrderDetails(prev => prev ? {
          ...prev,
          status: 'processing'
        } : null)
        setShowConfetti(true)
      } else {
        setStatus('success')
        setMessage('üéâ Thanh to√°n th√†nh c√¥ng!')
        setShowConfetti(true)
      }
    }

    handlePaymentSuccess()
  }, [searchParams])

  // Hide confetti after 3 seconds
  useEffect(() => {
    if (showConfetti) {
      const timer = setTimeout(() => setShowConfetti(false), 3000)
      return () => clearTimeout(timer)
    }
  }, [showConfetti])

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-lg w-full space-y-8">
        {/* Confetti Animation */}
        {showConfetti && (
          <div className="fixed inset-0 pointer-events-none z-10">
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="text-6xl animate-bounce">üéâ</div>
            </div>
          </div>
        )}

        <div className="text-center">
          {status === 'loading' && (
            <>
              <div className="mx-auto h-20 w-20 bg-blue-100 rounded-full flex items-center justify-center mb-6">
                <div className="animate-spin rounded-full h-12 w-12 border-b-3 border-blue-600"></div>
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-3">ƒêang x·ª≠ l√Ω thanh to√°n</h2>
              <p className="text-gray-600 text-lg">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
              <div className="mt-6 bg-blue-50 p-4 rounded-lg">
                <p className="text-sm text-blue-700">Ch√∫ng t√¥i ƒëang x√°c nh·∫≠n thanh to√°n c·ªßa b·∫°n</p>
              </div>
            </>
          )}

          {status === 'success' && (
            <>
              <div className="mx-auto h-20 w-20 bg-green-100 rounded-full flex items-center justify-center mb-6">
                <span className="text-4xl">üéâ</span>
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-3">Thanh to√°n th√†nh c√¥ng!</h2>
              <p className="text-gray-600 text-lg mb-6">{message}</p>

              {/* Order Details Card */}
              {orderDetails && (
                <div className="bg-white p-6 rounded-xl shadow-lg mb-6 border border-green-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <span className="mr-2">üìã</span>
                    Chi ti·∫øt ƒë∆°n h√†ng
                  </h3>
                  <div className="space-y-3 text-left">
                    <div className="flex justify-between">
                      <span className="text-gray-600">M√£ ƒë∆°n h√†ng:</span>
                      <span className="font-medium text-gray-900">{orderDetails.orderId}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Ph∆∞∆°ng th·ª©c:</span>
                      <span className="font-medium text-gray-900 capitalize">{orderDetails.method}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Th·ªùi gian:</span>
                      <span className="font-medium text-gray-900">{orderDetails.timestamp}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        {orderDetails.status === 'processing' ? 'ƒêang x·ª≠ l√Ω' : orderDetails.status}
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {/* Processing Timeline */}
              <div className="bg-white p-6 rounded-xl shadow-lg mb-6 border border-blue-200">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">‚è±Ô∏è</span>
                  Quy tr√¨nh x·ª≠ l√Ω
                </h3>
                <div className="space-y-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm">‚úì</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">Thanh to√°n th√†nh c√¥ng</p>
                      <p className="text-xs text-gray-500">ƒê√£ nh·∫≠n thanh to√°n c·ªßa b·∫°n</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <div className="flex-shrink-0 w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm">‚è≥</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng</p>
                      <p className="text-xs text-gray-500">K√≠ch ho·∫°t eSIM/USIM tr√™n h·ªá th·ªëng</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <div className="flex-shrink-0 w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                      <span className="text-gray-600 text-sm">‚óã</span>
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">G·ª≠i th√¥ng tin k√≠ch ho·∫°t</p>
                      <p className="text-xs text-gray-500">Email v·ªõi h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Notifications */}
              <div className="bg-yellow-50 p-4 rounded-lg mb-6 border border-yellow-200">
                <div className="flex items-start">
                  <span className="text-yellow-600 mr-3">üìß</span>
                  <div>
                    <h4 className="text-sm font-medium text-yellow-800">Th√¥ng b√°o qua email</h4>
                    <p className="text-sm text-yellow-700 mt-1">
                      B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n ƒë∆°n h√†ng v√† h∆∞·ªõng d·∫´n k√≠ch ho·∫°t trong v√≤ng 5-10 ph√∫t.
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <button
                  onClick={() => window.location.href = '/orders'}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg"
                >
                  üìã Xem ƒë∆°n h√†ng c·ªßa t√¥i
                </button>
                <button
                  onClick={() => window.location.href = '/products'}
                  className="w-full bg-green-600 hover:bg-green-700 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg"
                >
                  üõí Ti·∫øp t·ª•c mua s·∫Øm
                </button>
                <button
                  onClick={() => window.location.href = '/'}
                  className="w-full bg-gray-600 hover:bg-gray-700 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-200"
                >
                  üè† V·ªÅ trang ch·ªß
                </button>
              </div>
            </>
          )}

          {status === 'error' && (
            <>
              <div className="mx-auto h-20 w-20 bg-red-100 rounded-full flex items-center justify-center mb-6">
                <span className="text-4xl">‚ùå</span>
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-3">L·ªói thanh to√°n</h2>
              <p className="text-gray-600 text-lg mb-6">{message}</p>

              <div className="bg-red-50 p-4 rounded-lg mb-6 border border-red-200">
                <div className="flex items-start">
                  <span className="text-red-600 mr-3">‚ö†Ô∏è</span>
                  <div>
                    <h4 className="text-sm font-medium text-red-800">C·∫ßn h·ªó tr·ª£?</h4>
                    <p className="text-sm text-red-700 mt-1">
                      Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <button
                  onClick={() => window.location.href = '/products'}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg"
                >
                  üîÑ Th·ª≠ l·∫°i
                </button>
                <button
                  onClick={() => window.location.href = '/'}
                  className="w-full bg-gray-600 hover:bg-gray-700 text-white py-4 px-6 rounded-xl font-semibold transition-all duration-200"
                >
                  üè† V·ªÅ trang ch·ªß
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  )
}